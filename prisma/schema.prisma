// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                           Int                          @id @default(autoincrement())
  accountNo                    String                       @unique
  accountType                  String
  firstName                    String
  lastName                     String
  email                        String                       @unique
  password                     String
  isVerified                   Boolean                      @default(false)
  isEnabled                    Boolean                      @default(false)
  isBlacklisted                Boolean                      @default(false)
  createdAt                    DateTime                     @default(now())
  updatedAt                    DateTime?                    @updatedAt
  deletedAt                    DateTime?
  userOtps                     UserOtp[]
  busRouteBookingTickets       BusRouteBookingTicket[]
  busRouteBookingTicketPayment BusRouteBookingTransaction[]
}

model UserOtp {
  id        Int       @id @default(autoincrement())
  userId    Int
  code      String
  isUsed    Boolean   @default(false)
  expiresAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  user      User      @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Bus {
  id        Int        @id @default(autoincrement())
  busNo     String
  plateNo   String
  type      String     @default("ordinary")
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
  busStaffs BusStaff[]
  busRoutes BusRoute[]
}

model BusStaff {
  id        Int       @id @default(autoincrement())
  busId     Int
  name      String
  contact   String
  photo     String?
  type      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  bus       Bus       @relation(references: [id], fields: [busId], onDelete: Cascade)
}

model BusRoute {
  id                     Int                     @id @default(autoincrement())
  busId                  Int
  routeCode              String                  @unique
  routeFrom              String
  routeTo                String
  routeFromMapPin        String?
  routeToMapPin          String?
  departureTime          String
  departureDate          String
  arrivalTime            String?
  arrivalDate            String?
  status                 String                  @default("pending")
  createdAt              DateTime                @default(now())
  updatedAt              DateTime?               @updatedAt
  bus                    Bus                     @relation(references: [id], fields: [busId], onDelete: Cascade)
  busRouteTicketBookings BusRouteBookingTicket[]
  busRouteTickets        BusRouteTicket[]
}

model BusRouteTicket {
  id             Int       @id @default(autoincrement())
  busRouteId     Int
  type           String    @default("ordinary")
  availableCount Int       @default(0)
  price          Float
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  busRoute       BusRoute  @relation(references: [id], fields: [busRouteId], onDelete: Cascade)
}

model BusRouteBookingTicket {
  id                           Int                        @id @default(autoincrement())
  userId                       Int
  busRouteId                   Int
  busRouteBookingTransactionId Int
  ticketNo                     String                     @unique
  quantity                     Int
  createdAt                    DateTime                   @default(now())
  updatedAt                    DateTime?                  @updatedAt
  busRoute                     BusRoute                   @relation(references: [id], fields: [busRouteId], onDelete: Cascade)
  user                         User                       @relation(references: [id], fields: [userId], onDelete: Cascade)
  busRouteBookingTransaction   BusRouteBookingTransaction @relation(references: [id], fields: [busRouteBookingTransactionId], onDelete: Cascade)
}

model BusRouteBookingTransaction {
  id                     Int                     @id @default(autoincrement())
  userId                 Int
  link                   String
  status                 String                  @default("unpaid")
  data                   String                  @db.Text
  createdAt              DateTime                @default(now())
  updatedAt              DateTime?               @updatedAt
  user                   User                    @relation(references: [id], fields: [userId], onDelete: Cascade)
  busRouteBookingTickets BusRouteBookingTicket[]
}
