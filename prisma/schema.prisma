// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                     @id @default(autoincrement())
  accountNo              String                  @unique
  accountType            String
  firstName              String
  lastName               String
  email                  String                  @unique
  password               String
  isVerified             Boolean                 @default(false)
  isBlacklisted          Boolean                 @default(false)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime?               @updatedAt
  deletedAt              DateTime?
  userOtps               UserOtp[]
  busRouteBookingTickets BusRouteBookingTicket[]
}

model UserOtp {
  id        Int       @id @default(autoincrement())
  userId    Int
  code      String
  isUsed    Boolean   @default(false)
  expiresAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  user      User      @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Bus {
  id            Int       @id @default(autoincrement())
  busNo         String
  plateNo       String
  driverName    String
  conductorName String
  type          String    @default("ordinary")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}

model BusStaff {
  id        Int       @id @default(autoincrement())
  name      String
  contact   String
  photo     String?
  type      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model BusRoute {
  id              Int                     @id @default(autoincrement())
  routeCode       String                  @unique
  routeFrom       String
  routeTo         String
  routeFromMapPin String?
  routeToMapPin   String?
  departureTime   String
  departureDate   String
  arrivalTime     String?
  arrivalDate     String?
  createdAt       DateTime                @default(now())
  updatedAt       DateTime?               @updatedAt
  busRouteTicket  BusRouteBookingTicket[]
}

model BusRouteTicket {
  id             Int       @id @default(autoincrement())
  busRouteId     Int
  type           String    @default("ordinary")
  availableCount Int       @default(0)
  price          Float
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
}

model BusRouteBookingTicket {
  id                           Int                           @id @default(autoincrement())
  userId                       Int
  busRouteId                   Int
  ticketNo                     String                        @unique
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime?                     @updatedAt
  busRoute                     BusRoute                      @relation(references: [id], fields: [busRouteId], onDelete: Cascade)
  user                         User                          @relation(references: [id], fields: [userId], onDelete: Cascade)
  busRouteBookingTicketPayment BusRouteBookingTicketPayment?
}

model BusRouteBookingTicketPayment {
  id                      Int                   @id @default(autoincrement())
  busRouteBookingTicketId Int                   @unique
  link                    String
  status                  String                @default("unpaid")
  data                    String                @db.Text
  createdAt               DateTime              @default(now())
  updatedAt               DateTime?             @updatedAt
  busRouteBookingTicket   BusRouteBookingTicket @relation(references: [id], fields: [busRouteBookingTicketId], onDelete: Cascade)
}
